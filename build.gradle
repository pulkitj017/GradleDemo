plugins {
    id 'java'

    // Plugin to check outdated dependencies
    id 'com.github.ben-manes.versions' version '0.51.0'

    // Plugin for license reports
    id "com.github.jk1.dependency-license-report" version "2.8"

}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes(
            'Main-Class': 'org.example.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

// === Plugin Configuration for SBOM and License Reports ===
licenseReport {
    // Explicit directory for license reports
    outputDir = "$buildDir/reports/dependency-license"
    renderers = [
        new com.github.jk1.license.render.TextReportRenderer('licenses.txt'),
        new com.github.jk1.license.render.JsonReportRenderer('licenses.json')
    ]
}

// === Dependency Updates Plugin ===
dependencyUpdates {
    // Write reports in a clean directory instead of build/
    outputDir = "$projectDir/dependency-updates"
    outputFormatter = "plain"   // can be: "plain", "json", "xml"
    checkConstraints = true
    checkBuildEnvironmentConstraints = true

    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }
}



// === Utility method for dependencyUpdates ===
static boolean isNonStable(String version) {
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { kw -> version.toUpperCase().contains(kw) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
